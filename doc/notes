[ overview ]

lfs is a set of tools automating the creation of a linux from
scratch disk image. It handles the following tasks:
. which software to install, including version and dependencies,
. how to install a software,
. how to create a disk image.

The tools are currently implemented in BASH. There is no special
reason for that, but there were no reason to use a more powerful
scripting environment (PYTHON ...), since no complex structure
manipulation was planed at the time of writing. Plus, LFS aims
at running on LINUX plateforms, so OS portability was not considered.

It has been designed with the following goals in mind:
. keep the system simple. esp. adding a new board or software must
be simple and done in a centralized location, with a minimum amount
of effort and limited redundancy,
. for the common case, the user must not perform action of its own.
He must describe what to do to the engine. This is done by passing
established variables from and to the engine,
. in case the description process is not enough, the user should
still be able to bypass the engine and execute commands itself. In
this case, he must be able to rely on the engine context and internal
routine to avoid implementing too much code.


[ engine internals ]
TODO


[ usage ]
./sh/do_soft.sh {comex,rpib}


[ TODO ]

[[ soft/uboot ]]
to do

[[ soft/grub ]]
to test

[[ soft/crosstool-ng ]]
to do

[[ configure /etc files ]]
find a clean way to install them according to the configuration
-> /etc/fstab for network specific filesystem
-> network should be configured for dhcp or not
-> segfs is esrf specific
-> /etc/pass
=> per board post script ?

[[ patches ]]
patches to apply to a soft after extraction

[[ error handler ]]
register a list of actions to take on error, esp. losetup -d, umount
and rm tmp files

[[ configure LFS_ENABLE_PRESS_ENTER ]]

[[ remove -e $LFS_DISK_xxx_IMAGE tests ]]

[[ separate configure, build and install phase ]]
LFS_THIS_SOFT_CONFIGURE_METHOD={autotools}
LFS_THIS_SOFT_BUILD_METHOD=
LFS_THIS_SOFT_INSTALL_METHOD

[[ engine internals ]]
write the doc

[[ more flexible build scheme ]]
LFS_RETURN_VALUE is not enough during the build procedure.
use the following variable to drive the process:
LFS_DO_BUILD_SCHEME={byhand,make,autotools,kbuild}
LFS_DO_BUILD_ENV='CC='
LFS_DO_BUILD_ARG='SHARED=yes DNS=no --with-zlib=/path/to/zlib'

[[ LFS_IS_SOURCED ]]
introduce LFS_IS_SOURCED for sourcing detection

[[ lfs_xxx.sh ]]
rename do_xxx in lfs_xxx

[[ doc ]]
core component is a script implementing an engine that drive the
installation of packages and disk image creation. the engine general
behavior is configured by scripts and the different steps can be conf
by descriptive hooks. in case this is not enough, the engine can be
bypass by script taking charge of a whole step, still having access to
the engine context (routines and variables).

[[ debugging ]]
introduce LFS_VERBOSITY

[[ softs ]]
move network install into a package


[ acknowledgements ]

This project was started as a way to build embedded systems for
LINUX based plateforms engineered at the ESRF (http://www.esrf.eu).
At the same time, I was building a private similar tool for
RASPBERRYPI boards, so I decided to merge the efforts. It is now
maintained as needed both on my work and spare times bAny
contribution is welcome.

As of 2013, you can contact me at:
fabien.lementec@gmail.com (private email address)
lementec@esrf.fr (company email address)
