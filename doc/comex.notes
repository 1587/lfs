[ HOWTO: build a LINUX system from scratch for COMEX ]

this guide document the process of building a LINUX system from scratch
for a COMEX based platform. This guide is divided so that there is one
section per software component:
. the toolchain, used to compile the system softwares on a host to a target
plateform,
. the userland consisting of a set of basic tools and daemons,
. the ESRF specific components,
. the system flash image,
. the LINUX kernels, both default and realtime flavors,
. the bootloader.


[ toolchain ]

crosstool-ng is used to compile a toolchain to build the target
components on the host system. The latest version of crosstool-ng
can be retrieved and install with:
hg clone http://crosstool-ng.org/hg/crosstool-ng
./bootstrap
./configure
make install

The W environment variable is assumed to point a working directory.

Export some variables used to pass the ESRF proxy:
export http_proxy=http://proxy.esrf.fr:3128
export ftp_proxy=ftp://proxy.esrf.fr:3128
export all_proxy=socks://proxy.esrf.fr:3128
export https_proxy=https://proxy.esrf.fr:3128

Unsetting LD_LIBRARY_PATH is needed since it may break the compilation
process
export LD_LIBRARY_PATH=

Copy the provided configuration file:
cp crosstool-ng.config $W/.config

This configuration is for following component versions:
arch x86
linux 3.6.11
glibc 2.12.2
gcc 4.6.0

Build the toolchain:
ct-ng build

The resulting toolchain is available in:
$W/.build/i686-nptl-linux-gnu

In this guide, CROSS_INSTALL_DIR points to this location.

The following are advices if a different configuration must be used, for
instance to upgrade a component version (kernel headers, gcc, libc ...).

create a basic configuration file for the target:
ct-ng i686-nptl-linux-gnu

the configuration file can be changed using a curse based menu:
ct-ng menuconfig

build the toolchain:
ct-ng build

It can take some times since source tarballs are retrieved. If the build
process fails because of some tarballs can not be retrieved, try it at
end. For instance, after checking the file:
build.log

we see that the following package could not be downloaded:
cloog-ppl-0.15.9.tar.gz

Thus, we manually retrieve it:
wget http://pkgs.fedoraproject.org/repo/pkgs/cloog/cloog-ppl-0.15.9.tar.gz/806e001d1b1a6b130069ff6274900af5/cloog-ppl-0.15.9.tar.gz
mv cloog-ppl-0.15.9.tar.gz .build/tarballs/

The build process can then be restarted:
ct-ng build

ct-ng does not automatically recompute dependencies on changes. Thus, some
components may fail to compile due to broken dependencies. The correct
package versions must be set manually, using for instance:
ct-ng menuconfig

As an example, gcc-4.6.0 requires:
ppl-11.0
which requires:
cloog-ppl-0.15.11

The GCC list of dependencies for a given version can be found in:
$W/.build/src/gcc-4.6.0/gcc/doc/install.texi


[ prepare the root filesystem ]

First, a target root filesystem must be created on top of the MICROSD card. To
do so, insert the MICROSD card using a usb reader. Check the device name just
inserted:
$> dmesg
...
[1565050.329964] sd 10:0:0:1: [sdd] Assuming drive cache: write through
[1565050.331488]  sdd: sdd1 sdd2
[1565050.331696] sdd: p2 size 14546944 extends beyond EOD, truncated

We thus assume the device is:
/dev/sdd

In the following commands, we assume that the MICROSD card is 8GB wide. We
create 2 partitions for boot and root directories:
#> sfdisk -u M /dev/sdd << EOF
0,256,83,*
,7327,83,
Ctrl+D

Format the 2 partitions using ext2 filesystem:
#> mke2fs /dev/sdd1
#> mke2fs /dev/sdd2


[ userland ]

We assume the ROOTFS_DIR variable points to the root filesystem mount point.
We assume that /dev/sdd is the MICROSD device, and /dev/sdd2 is the root
partition.

Mount the root partition:
#> mount /dev/sdd2 $ROOTFS_DIR

[[ busybox ]]

Retrieve busybox:
mkdir $BUSYBOX_DIR
cd $BUSYBOX_DIR
http_proxy=proxy.esrf.fr:3128 \
wget http://busybox.net/downloads/busybox-1.21.0.tar.bz2

A configuration file is provided:
cp busybox-1.21.0.config .

The configuration file must be modified, esp. the toolchain and install paths:
$> make menuconfig \
ARCH=x86 \
CROSS_COMPILE=CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu-

Compile and install BUSYBOX:
$> make \
ARCH=x86 \
CROSS_COMPILE=CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu-
$> sudo make install \
ARCH=x86 \
CROSS_COMPILE=CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu-

[[ zlib ]]
./configure --prefix=/home/lementec/repo/dance/local/rootfs_zlib
Then update the Makefile variables to point to the correct location


[[ dropbear ]]

compile:

CC=CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu-gcc \
./configure \
--host=i686-nptl-linux-gnu \
--prefix=/home/lementec/repo/dance/local/rootfs_dropbear \
--with-zlib=/home/lementec/repo/dance/local/rootfs_zlib

make PROGRAMS="dropbear dropbearkey dbclient scp" MULTI=1

install by hand:
mkdir -p $ROOTFS_DROPBEAR_DIR/usr/bin/
cp dropbearmulti $ROOTFS_DROPBEAR_DIR/usr/bin/
ln -s dropbearmulti $ROOTFS_DROPBEAR_DIR/usr/bin/dbclient
ln -s dropbearmulti $ROOTFS_DROPBEAR_DIR/usr/bin/scp
ln -s dropbearmulti $ROOTFS_DROPBEAR_DIR/usr/bin/dropbear
ln -s dropbearmulti $ROOTFS_DROPBEAR_DIR/usr/bin/dropbearkey

Generate dropbear keys
dropbearkey -t rsa -f $ROOTFS_DROPBEAR_DIR/etc/dropbear_rsa_host_key
dropbearkey -t dss -f $ROOTFS_DROPBEAR_DIR/etc/dropbear_dss_host_key


[[ pciutils ]]

retrieve the source:
git clone http://git.kernel.org/pub/scm/utils/pciutils/pciutils.git

make install \
CROSS_COMPILE=$CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu- \
PREFIX=/home/lementec/repo/dance/local/rootfs_pciutils \
SHARED=yes \
ZLIB=no \
DNS=no


[[ Thierry Lecaer flash programming tool ]]

a version with modified Makfeile (CROSS_COMPILE variable) is at:
/segfs/bliss/source/hardware/lementec/repo/dance/src/flash

compile with:
CROSS_COMPILE=$CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu- \
make


[[ pcycle ]]

a version with modified Makfeile (CROSS_COMPILE variable) is at:
/segfs/bliss/source/hardware/lementec/repo/dance/src/pcycle

compile with:
CROSS_COMPILE=$CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu- \
make


[ ESRF specific components ]

TODO: pcidrvgen


[ flash image generation ]


[ kernel ]

[[ default LINUX kernel ]]

LINUX 3.6.11 source must be retrieved:
wget http://www.kernel.org/pub/linux/kernel/v3.0/linux-3.6.11.tar.bz2
bzip2 -d linux-3.6.11.tar.bz2
tar xvf linux-3.6.11.tar
cd linux-3.6.11

A kernel configuration file for COMEX plateform is available:
cp $HOWTO_DIR/linux-3.6.11.config .config

The configuration file can be modified, esp. the toolchain path:
make menuconfig \
ARCH=x86 \
CROSS_COMPILE=CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu-

Build the kernel:
make \
ARCH=x86 \
CROSS_COMPILE=CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu-

Build the modules:
make modules \
ARCH=x86 \
CROSS_COMPILE=CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu-

Install modules:
make modules_install \
ARCH=x86 \
CROSS_COMPILE=CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu- \
INSTALL_MOD_PATH=$ROOTFS_MODULES_DIR

A initramfs needs to be created. More information is available here:
http://en.gentoo-wiki.com/wiki/Initramfs


[[ realtime LINUX kernel ]]
TODO


[ bootloader ]

[[ grub ]]

This procedure requires GRUB to be installed on the host system. GRUB is
then installed on the target device with:
#> grub-install --boot-directory=$MOUNT_DIR $DEV
#> cp -rf $BOOTFS_DIR/grub/grub.cfg $MOUNT_DIR/grub/grub.cfg

The configuration file consists of:
$> cat grub.cfg
set default=0
set timeout=0
insmod fat
insmod ext2
set root=(hd0,2)
menuentry "vmlinuz-3.6.11" {
 linux /vmlinuz-3.6.11 root=/dev/mmcblk0p3 rootwait ro
}

More references on GRUB: 
http://www.linuxfromscratch.org/lfs/view/development/chapter08/grub.html


[[ uboot ]]

Retrieve uboot:
mkdir $UBOOT_INSTALL_DIR
cd $UBOOT_INSTALL_DIR
http_proxy=proxy.esrf.fr:3128 git clone http://git.denx.de/u-boot.git

Compile for the target plateform:
make menuconfig \
ARCH=x86 \
CROSS_COMPILE=CROSS_INSTALL_DIR/bin/i686-nptl-linux-gnu-


[ misc references ]
http://processors.wiki.ti.com/index.php/Creating_a_Root_File_System_for_Linux_on_OMAP35x
http://www.linuxjournal.com/content/kbuild-linux-kernel-build-system?page=0,2
